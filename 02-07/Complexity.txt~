	public static int max(int[] arr) {
		if (arr.length == 0) {
			throw new IllegalArgumentException(); // ignore this case
		} else {
			int ret = arr[0];
			for (int i = 1; i < arr.length; i++) {
				if (ret < arr[i]) {
					ret = arr[i];
				}
			}
			return ret;
		}
		
Build three mathematical model of the max method describing its worst, best, and average case
performance. Identify the relevant inputs to the method, operations to count, and give functions
that describes the number of operations the method performs in terms of the inputs that you
identify.

Relevant input(s): the integer array input
Critical Operations to count: 
1. Comparison operation;
2. Assigning value to ret variable.

Worst case scenario: 
T(n) = 2n
The max integer is located at the end of the input array and the input array is in ascending
order. So the comparison and assignment operations must be performed throughout the for-loop, 
which is n times. In sum, that's 2n in counting. 

Best case scenario:
T(n) = n + 1
The maximum integer is located at the very beginning of the input array. So the critical 
operation of assigning value to ret is carried out exactly once. However, since the function 
does not return in the loop, the comparison operation is still performed over the entire loop,
which is n times. In sum, that's n+1 times.

Average case:
T(n) = 5n/4 
On average, we expect the max integer to be around the center of the input array, which is 
located at n/2. However, the ascending/descending order of the array poses complication to the
average case analysis. Here we can simplify the problem by assuming that the array has alternating
order of ascent and descent, which means assignment operation occurs n/2/2 = n/4 times in the
average case. In sum, there will be n(comparison) + n/4(assignment) operations in this case. That
is, T(n) = 5n/4.
